(ns clojure-in-action.core
  (:gen-class)
  (:use clojure-in-action.metadata-example)
  (:use clojure-in-action.multimethod-example)
  (:use clojure-in-action.concurrency)
  (:use clojure-in-action.macros)
)

(defn -main [& args]
  (println "Hello, World!")
  (println untrusted)
  (println (meta untrusted))
  (println still-suspect)
  (println (meta still-suspect))
  (testing-meta)
  (println (meta (var testing-meta)))
  (println "Steven has to pay" (affiliate-fee {:salary 90000 :name "Steven" :referrer :google.com}) "dollars")
  (println "Andrew has to pay" (affiliate-fee {:salary 85000 :name "Andrew" :referrer :mint.com}) "dollars")
  (println "Julius has to pay" (affiliate-fee {:salary 82000 :name "Julius"}) "dollars")

  (println "Ashley has to pay" (profit-based-affiliate-fee {:salary 82000 :name "Ashley" :referrer :mint.com}) "dollars")

  (println "Jason has to pay" (affiliate-fee-for-hierarchy {:salary 92000 :name "Jason" :referrer :mint.com}) "dollars")
  (println "------------------------concurrency--------------------------")
  (println all-users)
  (let [t (Thread. #(add-new-user "steven" 200))]
    (.start t)
  )
  (add-new-user "ashley" 223)
  (. Thread sleep 1000)
  (println all-users)
  (println all-users-change-counter)
  (time (println "long-run result is" (long-run)))
  (time (println "fast-run result is" (fast-run)))
  (let [p (promise) t (Thread. #(promised-calculation p))]
    (.start t)
    (println "The result of promise is" @p)
  )
  (println "------------------------macros--------------------------")
  (let [a-ref (ref 0) t1 (Thread. #(sync-set a-ref 2)) t2 (Thread. #(sync-set a-ref 3))]
    (.start t1)
    (.start t2)
    (sync-set a-ref 1)
    (.join t1)
    (.join t2)
  )
  (println (macroexpand '(unless (even? x) (println "It is odd"))))
  (exhibits-oddity? 11)
  (exhibits-oddity? 10)
  (exhibits-oddity-verbose? 11)

  (shutdown-agents)
)
